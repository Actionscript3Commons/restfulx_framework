<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" xmlns:flexunit="flexunit.flexui.*"
  creationComplete="onCreationComplete()" backgroundColor="#FFFFFF">
	<mx:Script>
		<![CDATA[
		  import ruboss.test.cases.serializers.XMLSerializerTest;
		  import ruboss.test.cases.ModelsMetadataTest;
		  import org.ruboss.services.http.JSONHTTPServiceProvider;
		  import ruboss.test.cases.providers.JSONHTTPServiceProviderTest;
		  import ruboss.test.cases.Bug26Test;
		  import ruboss.test.cases.integration.AS3XMLHTTPServiceProviderTest;
		  import org.ruboss.services.as3http.AS3XMLHTTPServiceProvider;
		  import ruboss.test.cases.serializers.VOSerializerTest;
		  import ruboss.test.cases.serializers.JSONSerializerTest;
		  import org.ruboss.Ruboss;
      import org.ruboss.services.mock.MockXMLHTTPServiceProvider;
      import org.ruboss.services.mock.MockAIRServiceProvider;
      import ruboss.test.controllers.RubossTestController;
		  import ruboss.test.cases.SimplePropertiesTest;
      import ruboss.test.cases.RubossCommandTest;
      import ruboss.test.cases.RubossUtilTest;
			import flexunit.framework.TestSuite;
			
			private function onCreationComplete():void {
			  Ruboss.enableLogging();
        RubossTestController.initialize([MockXMLHTTPServiceProvider, MockAIRServiceProvider, AS3XMLHTTPServiceProvider,
          JSONHTTPServiceProvider], 
          MockXMLHTTPServiceProvider.ID, "ruboss-tests");
                    
        var testData:Object = {
          simple_properties: simple_properties,
          addresses: addresses,
          projects: projects,
          tasks: tasks,
          contractors: contractors,
          locations: locations,
          employees: employees,
          customers: customers,
          categories: categories,
          movies: movies,
          actors: actors
        }

        MockXMLHTTPServiceProvider(Ruboss.services.getServiceProvider(MockXMLHTTPServiceProvider.ID)).loadTestData(testData);
//        MockAIRServiceProvider(Ruboss.services.getServiceProvider(MockAIRServiceProvider.ID)).loadTestData(testData);
			  
			  var testSuite:TestSuite = new TestSuite;
			  addServiceDependentTests(testSuite, MockXMLHTTPServiceProvider.ID);
//			  addServiceDependentTests(testSuite, MockAIRServiceProvider.ID);
			  addNonServiceDependentTests(testSuite);
//        addIntegrationTests(testSuite);
 				testRunner.test = testSuite;
 				testRunner.startTest();
 			}
			
			private function addServiceDependentTests(ts:TestSuite, serviceProviderId:int):void {
 				ts.addTest(new SimplePropertiesTest("testSimpleModelIndex", serviceProviderId));
 				ts.addTest(new SimplePropertiesTest("testSimpleModelCreate", serviceProviderId));
 				ts.addTest(new SimplePropertiesTest("testSimpleModelCreateFollowedByUpdate", serviceProviderId));			
 			}
 			
 			private function addNonServiceDependentTests(ts:TestSuite):void {
 			  ts.addTest(new RubossUtilTest("testResourceNesting"));
 			  ts.addTest(new RubossCommandTest("testCommandExecutionByClass"));
        ts.addTest(new RubossCommandTest("testCommandExecutionByName"));
        ts.addTest(new XMLSerializerTest("testSimpleProperties"));
        ts.addTest(new XMLSerializerTest("testBasicRelationships"));


//        ts.addTest(new JSONSerializerTest("testSimpleObjectUnmarshalling"));
//        ts.addTest(new JSONSerializerTest("testObjectUnmarshallingWithRelationships"));
//        ts.addTest(new JSONSerializerTest("testObjectMarshallingWithRelationships"));
//        ts.addTest(new VOSerializerTest("testObjectMarshallingWithRelationships"));
//        ts.addTest(new Bug26Test("testUserShow"));
//        ts.addTest(new JSONHTTPServiceProviderTest("testPeek"));
 			}
 			
 			private function addIntegrationTests(ts:TestSuite):void {
// 			  ts.addTest(new AS3XMLHTTPServiceProviderTest("testIndex"));
//        ts.addTest(new AS3XMLHTTPServiceProviderTest("testCreate"));
//        ts.addTest(new AS3XMLHTTPServiceProviderTest("testCreateAndUpdate"));
//        ts.addTest(new JSONHTTPServiceProviderTest("testIndex"));
//        ts.addTest(new JSONHTTPServiceProviderTest("testCreate"));
//        ts.addTest(new JSONHTTPServiceProviderTest("testUpdate"));
//        ts.addTest(new JSONHTTPServiceProviderTest("testDestroy"));
//          ts.addTest(new ModelsMetadataTest("testMetadataExtraction"));
          //ts.addTest(new XMLSerializerTest("testBasicRelationships"));
 			}
		]]>
	</mx:Script>
  <mx:XML id="simple_properties" source="ruboss/test/responses/simple_properties.xml"/>
  <mx:XML id="projects" source="ruboss/test/responses/projects.xml"/>
  <mx:XML id="tasks" source="ruboss/test/responses/tasks.xml"/>
  <mx:XML id="contractors" source="ruboss/test/responses/contractors.xml"/>
  <mx:XML id="locations" source="ruboss/test/responses/locations.xml"/>
  <mx:XML id="customers" source="ruboss/test/responses/customers.xml"/>
  <mx:XML id="employees" source="ruboss/test/responses/employees.xml"/>
  <mx:XML id="categories" source="ruboss/test/responses/categories.xml"/>
  <mx:XML id="movies" source="ruboss/test/responses/movies.xml"/>
  <mx:XML id="actors" source="ruboss/test/responses/actors.xml"/>


	<mx:XML id="addresses" source="ruboss/test/responses/addresses.xml"/>
	<mx:XML id="bug26user" source="ruboss/test/responses/bug26/user.xml"/>
	<mx:XML id="bug26contactA" source="ruboss/test/responses/bug26/contactA.xml"/>
	<mx:XML id="bug26contactB" source="ruboss/test/responses/bug26/contactB.xml"/>
	<flexunit:TestRunnerBase id="testRunner" width="100%" height="100%"/>
</mx:Application>